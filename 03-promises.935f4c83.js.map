{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAkDA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,cAEpBG,EAAO,CAAEJ,WAAUC,a,GAEpBA,E,KAzDM,CACXQ,OAAQC,SAASC,cAAc,SAC/BC,QAASF,SAASC,cAAc,iBAG7BF,OAAOI,iBAAiB,UAE7B,SAAsBC,GACpBA,EAAMC,iBAsBR,SAA0BC,GAExB,IADA,IAAIf,EAAYe,EAASC,MAChBC,EAAI,EAAGA,GAAKF,EAASG,OAAQD,GAAK,EACzCnB,EAAcmB,EAAGjB,GACdmB,MAAK,SAAAC,GACJC,EAAAzB,GAAS0B,OAAOC,QACd,uBAA+CC,OAAtBJ,EAAOrB,SAAS,QAAuByB,OAAjBJ,EAAOpB,UAAU,M,IAGnEyB,OAAM,SAAAC,GACLL,EAAAzB,GAAS0B,OAAOK,QACd,sBAA0CH,OAApBE,EAAK3B,SAAS,QAAqByB,OAAfE,EAAK1B,UAAU,M,IAG/DA,GAAwBe,EAASa,I,CAlCnCC,CAGF,SAAmBhB,GACjB,IAAMiB,EAAejB,EAAMkB,cAAcC,SACnChB,EAAQiB,OAAOH,EAAad,MAAMkB,OAClCN,EAAOK,OAAOH,EAAaF,KAAKM,OAChChB,EAASe,OAAOH,EAAaZ,OAAOgB,OAC1C,OAAIlB,EAAQ,GAAKY,EAAO,GAAKV,EAAS,OACpCG,EAAAzB,GAAS0B,OAAOK,QAAQ,gCAGjB,CACLX,QACAY,OACAV,S,CAhBaiB,CAAUtB,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  inputEl: document.querySelector('.form input'),\n};\n\nrefs.formEl.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const formData = checkDate(event);\n  generatePromises(formData);\n}\n\nfunction checkDate(event) {\n  const formElements = event.currentTarget.elements;\n  const delay = Number(formElements.delay.value);\n  const step = Number(formElements.step.value);\n  const amount = Number(formElements.amount.value);\n  if (delay < 0 || step < 0 || amount < 0) {\n    Notiflix.Notify.failure('Enter a value greater than 0');\n    return;\n  } else {\n    return {\n      delay,\n      step,\n      amount,\n    };\n  }\n}\n\nfunction generatePromises(formData) {\n  let delayTime = formData.delay;\n  for (let i = 1; i <= formData.amount; i += 1) {\n    createPromise(i, delayTime)\n      .then(result => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${result.position} in ${result.delayTime}ms`\n        );\n      })\n      .catch(eror => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${eror.position} in ${eror.delayTime}ms`\n        );\n      });\n    delayTime = delayTime + formData.step;\n  }\n}\n\nfunction createPromise(position, delayTime) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delayTime });\n      } else {\n        reject({ position, delayTime });\n      }\n    }, delayTime);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delayTime","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","formEl","document","querySelector","inputEl","addEventListener","event","preventDefault","formData","delay","i","amount","then","result","$parcel$interopDefault","Notify","success","concat","catch","eror","failure","step","$ce04d3a99e08e73b$var$generatePromises","formElements","currentTarget","elements","Number","value","$ce04d3a99e08e73b$var$checkDate"],"version":3,"file":"03-promises.935f4c83.js.map"}